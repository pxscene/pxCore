cmake_minimum_required(VERSION 2.8)
project(pxscene2dtests)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

set(PXCOREDIR ${CMAKE_CURRENT_SOURCE_DIR}/../../)
set(EXTDIR "${PXCOREDIR}/examples/pxScene2d/external")
set(NODEDIR "${EXTDIR}/libnode-v6.9.0/")
set(NODEINC ${NODEDIR}/src ${NODEDIR}/deps/uv/include ${NODEDIR}/deps/v8 ${NODEDIR}/deps/debugger-agent/include ${NODEDIR}/deps/v8/include ${NODEDIR}/deps/cares/include)
set(ZLIBINC "${EXTDIR}/zlib/")
set(CURLINC "${EXTDIR}/curl/include")
set(JPGINC "${EXTDIR}/jpg")
set(JPGTURBOINC "${EXTDIR}/libjpeg-turbo")
set(PNGINC "${EXTDIR}/png")
set(FREETYPEINC "${EXTDIR}/ft/include")
set(WESTEROSINC ${EXTDIR}/westeros/external/install/include)
set(WESTEROSSTUBINC ${EXTDIR}/westeros-stub)
set(JPEGTURBOINC ${EXTDIR}/libjpeg-turbo)
set(BREAKPADINC ${EXTDIR}/breakpad/src)
set(RTREMOTEINC ${PXCOREDIR}/remote)
set(GOOGLETESTINC ${EXTDIR}/gtest/googletest/include ${EXTDIR}/gtest/googletest ${EXTDIR}/gtest/googlemock/include ${EXTDIR}/gtest/googlemock)
set(PXCOREINC ${PXCOREDIR}/src)
set(PXSCENEINC ${PXCOREDIR}/examples/pxScene2d/src)

set(BUILD_UNIT_TEST 0)

option(BUILD_WITH_WINDOWLESS_EGL "BUILD_WITH_WINDOWLESS_EGL" OFF)
option(PXSCENE_TEST_HTTP_CACHE "PXSCENE_TEST_HTTP_CACHE" ON)


include_directories(AFTER ${GOOGLETESTINC} ${PXCOREINC} ${PXSCENEINC} ${NODEINC})
include_directories(AFTER ${CMAKE_CURRENT_SOURCE_DIR})

if (CMAKE_HOST_SYSTEM_NAME STREQUAL "Linux")
    if (HOSTNAME STREQUAL "raspberrypi")
        message("Unit tests are not currently supported on raspberry pi")
    elseif (BUILD_WITH_WINDOWLESS_EGL)
        message("Building unit tests for egl")
        set(PX_PLATFORM PX_PLATFORM_GENERIC_EGL)
        set(PXCORE_LIB_LOCATION ${PXCOREDIR}/build/egl)
        set(PXSCENETEST_LINK_DIRECTORIES ${PXCORE_LIB_LOCATION} ${PXCOREDIR}/remote)
        #set(PLATFORM_LIBRARIES pxscene node pxCore rtCore_s pthread v8_libplatform png16 dl rt jpeg freetype curl z GLESv2 ssl crypto dl rtRemote westeros_compositor nexus nxclient)
        set(TEST_APP_LINKER_OPTIONS -lpxscene -lpxCore -lrtCore_s -lpng16 -ljpeg -lfreetype -lcurl -lz -lGLESv2 -lrtRemote -lwesteros_compositor -lnexus -lnxclient -Wl,--whole-archive ${NODEDIR}/out/Release/obj.target/libnode.a ${NODEDIR}/out/Release/obj.target/deps/cares/libcares.a ${NODEDIR}/out/Release/obj.target/deps/v8/tools/gyp/libv8_base.a -Wl,--no-whole-archive -Wl,--start-group  ${NODEDIR}/out/Release/obj.target/deps/http_parser/libhttp_parser.a  ${NODEDIR}/out/Release/obj.target/deps/uv/libuv.a ${NODEDIR}/out/Release/obj.target/deps/v8/tools/gyp/libv8_base.a ${NODEDIR}/out/Release/obj.target/deps/v8/tools/gyp/libv8_libbase.a ${NODEDIR}/out/Release/obj.target/deps/v8/tools/gyp/libv8_nosnapshot.a ${NODEDIR}/out/Release/obj.target/deps/v8/tools/gyp/libv8_libplatform.a ${NODEDIR}/out/Release/obj.target/deps/v8_inspector/third_party/v8_inspector/platform/v8_inspector/libv8_inspector_stl.a -Wl,--end-group -lpthread -lssl -lcrypto -ldl -lrt )
        add_definitions(-DRT_PLATFORM_LINUX -DENABLE_NODE_V_6_9 -DNODE_PLATFORM="linux" -DNODE_WANT_INTERNALS=1 -DV8_DEPRECATION_WARNINGS=1 -DNODE_SHARED_MODE -DNODE_USE_V8_PLATFORM=1 -DNODE_HAVE_I18N_SUPPORT=1 -DNODE_HAVE_SMALL_ICU=1 -DHAVE_INSPECTOR=1 -DV8_INSPECTOR_USE_STL=1 -DV8_INSPECTOR_USE_OLD_STL=1)
        if (DEFINED ENV{PXSCENE_DISABLE_APNG_SUPPORT})
            message("Not including APNG support for pxscene")
        else ()
            message("Including APNG support for pxscene")
            add_definitions(-DPNG_APNG_SUPPORTED)
        endif (DEFINED ENV{PXSCENE_DISABLE_APNG_SUPPORT})
        set(BUILD_UNIT_TEST 1)
        #set(PLATFORM_TEST_FILES test_pxWayland.cpp test_pxWaylandContainer.cpp)
    else ()
        message("Building unit tests for glut")
        include_directories(AFTER ${ZLIBINC} ${CURLINC} ${JPGINC} ${JPGTURBOINC} ${PNGINC} ${GLUTINC} ${FREETYPEINC} ${WESTEROSSTUBINC})
        set(PX_PLATFORM PX_PLATFORM_GLUT)
        set(PXCORE_LIB_LOCATION ${PXCOREDIR}/build/glut)
        set(PXSCENETEST_LINK_DIRECTORIES ${PXCORE_LIB_LOCATION})
        set(PLATFORM_LIBRARIES pxscene pxCore rtCore_s pthread v8_libplatform png16 X11 glut GLEW GL dl rt turbojpeg jpeg freetype curl z node uv)
        add_definitions(-DRT_PLATFORM_LINUX -DENABLE_NODE_V_6_9 -DNODE_PLATFORM="linux" -DNODE_WANT_INTERNALS=1 -DV8_DEPRECATION_WARNINGS=1 -DNODE_SHARED_MODE -DNODE_USE_V8_PLATFORM=1 -DNODE_HAVE_I18N_SUPPORT=1 -DNODE_HAVE_SMALL_ICU=1 -DHAVE_INSPECTOR=1 -DV8_INSPECTOR_USE_STL=1 -DV8_INSPECTOR_USE_OLD_STL=1 -DENABLE_DEBUG_MODE -DENABLE_LIBJPEG_TURBO -DPNG_APNG_SUPPORTED)
        set(BUILD_UNIT_TEST 1)
        set(TEST_WAYLAND_SOURCE_FILES "")
        #set(TEST_WAYLAND_SOURCE_FILES test_pxWayland.cpp test_pxWaylandContainer.cpp)
        set(PLATFORM_TEST_FILES test_jsfiles.cpp test_rtError.cpp test_pxUtil.cpp)
        if (PXSCENE_TEST_HTTP_CACHE)
                message("Enabling http cache tests")
                set(PLATFORM_TEST_FILES ${PLATFORM_TEST_FILES} test_imagecache.cpp)
        endif (PXSCENE_TEST_HTTP_CACHE)
        if (DEFINED ENV{CODE_COVERAGE})
            message("enabling code coverage support")
            add_definitions(-DENABLE_CODE_COVERAGE)
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fprofile-arcs -ftest-coverage -fno-inline")
            set(PLATFORM_LIBRARIES ${PLATFORM_LIBRARIES} gcov)
        endif ()
    endif (HOSTNAME STREQUAL "raspberrypi")
elseif (APPLE)
    message("Building unit tests for mac")
    include_directories(AFTER ${ZLIBINC} ${CURLINC} ${JPGINC} ${PNGINC} ${FREETYPEINC})
    set(PX_PLATFORM PX_PLATFORM_MAC)
    set(PXCORE_LIB_LOCATION ${PXCOREDIR}/build/mac)
    set(PXSCENETEST_LINK_DIRECTORIES ${PXCORE_LIB_LOCATION})
    set(PLATFORM_LIBRARIES rtCore_s pxCore pxscene png16 dl freetype curl z node)
    set(PLATFORM_LIBRARIES ${PLATFORM_LIBRARIES} "-framework OpenGL -framework Cocoa -framework Foundation")
    set(TEST_APP_LINKER_OPTIONS ${TEST_APP_LINKER_OPTIONS} "${EXTDIR}/jpg/.libs/libjpeg.a")
    add_definitions(-DRT_PLATFORM_LINUX -DENABLE_NODE_V_6_9 -DNODE_PLATFORM="linux" -DNODE_WANT_INTERNALS=1 -DV8_DEPRECATION_WARNINGS=1 -DNODE_SHARED_MODE -DNODE_USE_V8_PLATFORM=1 -DNODE_HAVE_I18N_SUPPORT=1 -DNODE_HAVE_SMALL_ICU=1 -DHAVE_INSPECTOR=1 -DV8_INSPECTOR_USE_STL=1 -DV8_INSPECTOR_USE_OLD_STL=1 -DENABLE_DEBUG_MODE -DENABLE_LIBJPEG_TURBO -DPNG_APNG_SUPPORTED)
    set(BUILD_UNIT_TEST 1)
    set(TEST_WAYLAND_SOURCE_FILES "")
    set(PLATFORM_TEST_FILES "")
    if (DEFINED ENV{CODE_COVERAGE})
        message("enabling code coverage support")
        add_definitions(-DENABLE_CODE_COVERAGE)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fprofile-arcs -ftest-coverage -fno-inline")
    execute_process(COMMAND clang --version OUTPUT_VARIABLE LLVM_VERSION1 ERROR_VARIABLE ERROR_VARIABLE1 COMMAND grep "LLVM version" OUTPUT_VARIABLE LLVM_VERSION2 ERROR_VARIABLE LLVM_ERROR2 COMMAND awk "{print $4}" OUTPUT_FILE llvmoutput OUTPUT_VARIABLE LLVM_VERSION3 ERROR_VARIABLE LLVM_ERROR3)
    execute_process(COMMAND awk "{ printf \"%s\", $0 }" llvmoutput OUTPUT_VARIABLE LLVM_VERSION)
    execute_process(COMMAND rm llvmoutput)

    set(TEST_APP_LINKER_OPTIONS ${TEST_APP_LINKER_OPTIONS} "-L/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/${LLVM_VERSION}/lib/darwin -lclang_rt.profile_osx")
    endif ()
else()
    message("Unit tests are not currently supported on this platform")
endif (CMAKE_HOST_SYSTEM_NAME STREQUAL "Linux")

add_definitions(-D${PX_PLATFORM} -DENABLE_RT_NODE -DRUNINMAIN -DENABLE_HTTP_CACHE)

set(TEST_SOURCE_FILES pxscene2dtestsmain.cpp  test_example.cpp test_api.cpp  test_pxcontext.cpp test_memoryleak.cpp test_rtnode.cpp
    test_pxAnimate.cpp test_rtFile.cpp test_rtZip.cpp test_rtString.cpp test_rtValue.cpp test_pxImage.cpp test_pxOffscreen.cpp test_pxMatrix4T.cpp
    test_pxWindowUtil.cpp test_pxTexture.cpp test_pxWindow.cpp test_ioapi.cpp ${PLATFORM_TEST_FILES} ${TEST_WAYLAND_SOURCE_FILES})

if (DEFINED ENV{USE_HTTP_CACHE})
    message("Include http cache tests")
    set(TEST_SOURCE_FILES ${TEST_SOURCE_FILES} test_imagecache.cpp)
endif (DEFINED ENV{USE_HTTP_CACHE})

set(TEST_SOURCE_FILES ${TEST_SOURCE_FILES} ${EXTDIR}/gtest/googletest/src/gtest-all.cc ${EXTDIR}/gtest/googlemock/src/gmock-all.cc)

set(PXSCENE_TEST_LINK_LIBRARIES ${PLATFORM_LIBRARIES})

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -fpermissive -g -Wall -Wno-attributes -Wall -Wextra -Wno-write-strings -Wno-format-security -std=c++11 -O3")

set(PXSCENETEST_LINK_DIRECTORIES ${PXSCENETEST_LINK_DIRECTORIES} ${EXTDIR}/png/.libs)
set(PXSCENETEST_LINK_DIRECTORIES ${PXSCENETEST_LINK_DIRECTORIES} ${EXTDIR}/jpg/.libs)
set(PXSCENETEST_LINK_DIRECTORIES ${PXSCENETEST_LINK_DIRECTORIES} ${EXTDIR}/ft/objs/.libs)
set(PXSCENETEST_LINK_DIRECTORIES ${PXSCENETEST_LINK_DIRECTORIES} ${EXTDIR}/curl/lib/.libs)
set(PXSCENETEST_LINK_DIRECTORIES ${PXSCENETEST_LINK_DIRECTORIES} ${EXTDIR}/zlib)
set(PXSCENETEST_LINK_DIRECTORIES ${PXSCENETEST_LINK_DIRECTORIES} ${NODEDIR}/out/Release/obj.target ${NODEDIR}/out/Release ${NODEDIR}/out/Release/obj.target/deps/v8/tools/gyp)

if (CMAKE_HOST_SYSTEM_NAME STREQUAL "Linux")
set(PXSCENETEST_LINK_DIRECTORIES ${PXSCENETEST_LINK_DIRECTORIES} ${EXTDIR}/libjpeg-turbo/.libs)
endif ()

set(PXSCENETEST_LINK_DIRECTORIES ${PXSCENETEST_LINK_DIRECTORIES} ${PXSCENEINC})

if (BUILD_UNIT_TEST GREATER 0)
    link_directories(${PXSCENETEST_LINK_DIRECTORIES})
    add_executable(pxscene2dtests ${TEST_SOURCE_FILES})
    target_link_libraries(pxscene2dtests ${PXSCENE_TEST_LINK_LIBRARIES} ${TEST_APP_LINKER_OPTIONS})
endif (BUILD_UNIT_TEST GREATER 0)
