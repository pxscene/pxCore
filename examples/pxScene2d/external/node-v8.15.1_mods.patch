diff --git a/examples/pxScene2d/external/libnode-v8.15.1/src/node.cc b/examples/pxScene2d/external/libnode-v8.15.1/src/node.cc
index 3d791f0..dcac866 100644
--- a/examples/pxScene2d/external/libnode-v8.15.1/src/node.cc
+++ b/examples/pxScene2d/external/libnode-v8.15.1/src/node.cc
@@ -178,10 +178,16 @@ static bool track_heap_objects = false;
 static const char* eval_string = nullptr;
 static std::vector<std::string> preload_modules;
 static const int v8_default_thread_pool_size = 4;
-static int v8_thread_pool_size = v8_default_thread_pool_size;
+/*MODIFIED CODE BEGIN*/
+//static int v8_thread_pool_size = v8_default_thread_pool_size;
+int v8_thread_pool_size = v8_default_thread_pool_size;
+/*MODIFIED CODE END*/
 static bool prof_process = false;
 static bool v8_is_profiling = false;
-static bool node_is_initialized = false;
+/*MODIFIED CODE BEGIN*/
+//static bool node_is_initialized = false;
+bool node_is_initialized = false;
+/*MODIFIED CODE END*/
 static node_module* modpending;
 static node_module* modlist_builtin;
 static node_module* modlist_internal;
@@ -266,7 +272,11 @@ bool linux_at_secure = false;
 double prog_start_time;
 
 static Mutex node_isolate_mutex;
-static v8::Isolate* node_isolate;
+/*MODIFIED CODE BEGIN*/
+//static v8::Isolate* node_isolate;
+v8::Isolate* node_isolate;
+FILE* errorFile = NULL;
+/*MODIFIED CODE END*/
 
 DebugOptions debug_options;
 
@@ -366,6 +376,28 @@ static struct {
 static const unsigned kMaxSignal = 32;
 #endif
 
+/* MODIFIED CODE BEGIN */
+void PrintErrorStringToFile(const char* format, ...) {
+  va_list filelog;
+  va_start(filelog, format);
+  const char* val = getenv("NODE_ERROR_FILE");
+  if (val) {
+    errorFile = fopen(val,"w");
+  }
+  else
+  {
+    errorFile = fopen("/tmp/nodeerror.log","w");
+  }
+  if (NULL != errorFile)
+  {
+    vfprintf(errorFile, format, filelog);
+    fclose(errorFile);
+    errorFile = NULL;
+  }
+  va_end(filelog);
+}
+/* MODIFIED CODE END */
+
 void PrintErrorString(const char* format, ...) {
   va_list ap;
   va_start(ap, format);
@@ -1157,6 +1189,11 @@ bool DomainsStackHasErrorHandler(const Environment* env) {
 }
 
 
+/*MODIFIED CODE BEGIN*/
+} //anonymous namespace
+/*MODIFIED CODE END*/
+
+
 bool ShouldAbortOnUncaughtException(Isolate* isolate) {
   HandleScope scope(isolate);
 
@@ -1171,6 +1208,11 @@ bool ShouldAbortOnUncaughtException(Isolate* isolate) {
 }
 
 
+/*MODIFIED CODE BEGIN*/
+namespace {
+/*MODIFIED CODE END*/
+
+
 Local<Value> GetDomainProperty(Environment* env, Local<Object> object) {
   Local<Value> domain_v =
       object->GetPrivate(env->context(), env->domain_private_symbol())
@@ -1673,6 +1715,9 @@ void AppendExceptionLine(Environment* env,
 
     uv_tty_reset_mode();
     PrintErrorString("\n%s", arrow);
+    /* MODIFIED CODE BEGIN */
+    PrintErrorStringToFile("\n%s", arrow);
+    /* MODIFIED CODE END */
     return;
   }
 
@@ -1712,9 +1757,15 @@ static void ReportException(Environment* env,
   if (trace.length() > 0 && !trace_value->IsUndefined()) {
     if (arrow.IsEmpty() || !arrow->IsString() || decorated) {
       PrintErrorString("%s\n", *trace);
+      /* MODIFIED CODE BEGIN */
+      PrintErrorStringToFile("%s\n", *trace);
+      /* MODIFIED CODE END */
     } else {
       node::Utf8Value arrow_string(env->isolate(), arrow);
       PrintErrorString("%s\n%s\n", *arrow_string, *trace);
+      /* MODIFIED CODE BEGIN */
+      PrintErrorStringToFile("%s\n%s\n", *arrow_string, *trace);
+      /* MODIFIED CODE END */
     }
   } else {
     // this really only happens for RangeErrors, since they're the only
@@ -1738,18 +1789,31 @@ static void ReportException(Environment* env,
 
       PrintErrorString("%s\n", *message ? *message :
                                           "<toString() threw exception>");
+      /* MODIFIED CODE BEGIN */
+      PrintErrorStringToFile("%s\n", *message ? *message :
+                                          "<toString() threw exception>");
+      /* MODIFIED CODE END */
     } else {
       node::Utf8Value name_string(env->isolate(), name);
       node::Utf8Value message_string(env->isolate(), message);
 
       if (arrow.IsEmpty() || !arrow->IsString() || decorated) {
         PrintErrorString("%s: %s\n", *name_string, *message_string);
+        /* MODIFIED CODE BEGIN */
+        PrintErrorStringToFile("%s: %s\n", *name_string, *message_string);
+        /* MODIFIED CODE END */
       } else {
         node::Utf8Value arrow_string(env->isolate(), arrow);
         PrintErrorString("%s\n%s: %s\n",
                          *arrow_string,
                          *name_string,
                          *message_string);
+        /* MODIFIED CODE BEGIN */
+        PrintErrorStringToFile("%s\n%s: %s\n",
+                         *arrow_string,
+                         *name_string,
+                         *message_string);
+        /* MODIFIED CODE END */
       }
     }
   }
@@ -2047,14 +2111,19 @@ static void OnFatalError(const char* location, const char* message) {
     PrintErrorString("FATAL ERROR: %s\n", message);
   }
   fflush(stderr);
-  ABORT();
+  /* MODIFIED CODE BEGIN */
+  //ABORT();
+  /* MODIFIED CODE END */
 }
 
 
-NO_RETURN void FatalError(const char* location, const char* message) {
+/* MODIFIED CODE BEGIN */
+/*NO_RETURN*/ void FatalError(const char* location, const char* message) {
   OnFatalError(location, message);
   // to suppress compiler warning
-  ABORT();
+  /* MODIFIED CODE BEGIN */
+  //ABORT();
+  /* MODIFIED CODE END */
 }
 
 
@@ -2103,7 +2172,9 @@ void FatalException(Isolate* isolate,
 #if HAVE_INSPECTOR
     env->inspector_agent()->FatalException(error, message);
 #endif
-    exit(exit_code);
+    /* MODIFIED CODE BEGIN */
+    //exit(exit_code);
+    /* MODIFIED CODE END */
   }
 }
 
@@ -4276,6 +4347,22 @@ void RegisterBuiltinModules() {
 #undef V
 }
 
+/*MODIFIED CODE BEGIN*/
+#if HAVE_INSPECTOR
+void InspectorInit(Environment* env, const char* path, MultiIsolatePlatform* platform) {
+  env->inspector_agent()->Init(static_cast<node::NodePlatform*>(platform), path, debug_options);
+}
+void InspectorStart(Environment* env, const char* path, MultiIsolatePlatform* platform, std::string host, int port) {
+  debug_options.set_host_name(host);
+  debug_options.set_port(port);
+  env->inspector_agent()->Start(static_cast<node::NodePlatform*>(platform), path, debug_options);
+}
+void InspectorStop(Environment* env) {
+  env->inspector_agent()->Stop();
+}
+#endif
+/*MODIFIED CODE END*/
+
 }  // namespace node
 
 #if !HAVE_INSPECTOR
diff --git a/examples/pxScene2d/external/libnode-v8.15.1/src/node.h b/examples/pxScene2d/external/libnode-v8.15.1/src/node.h
index 266744e..c81cbb4 100644
--- a/examples/pxScene2d/external/libnode-v8.15.1/src/node.h
+++ b/examples/pxScene2d/external/libnode-v8.15.1/src/node.h
@@ -197,6 +197,13 @@ typedef intptr_t ssize_t;
 namespace node {
 
 NODE_EXTERN extern bool no_deprecation;
+
+/*MODIFIED CODE BEGIN*/
+NODE_EXTERN extern int v8_thread_pool_size;
+NODE_EXTERN extern v8::Isolate* node_isolate;
+NODE_EXTERN extern bool node_is_initialized;
+/*MODIFIED CODE END*/
+
 #if HAVE_OPENSSL
 NODE_EXTERN extern bool ssl_openssl_cert_store;
 # if NODE_FIPS_MODE
@@ -214,6 +221,10 @@ NODE_EXTERN void Init(int* argc,
 class IsolateData;
 class Environment;
 
+/*MODIFIED CODE BEGIN*/
+NODE_EXTERN bool ShouldAbortOnUncaughtException(v8::Isolate* isolate);
+/*MODIFIED CODE END*/
+
 class MultiIsolatePlatform : public v8::Platform {
  public:
   virtual ~MultiIsolatePlatform() { }
@@ -226,6 +237,14 @@ class MultiIsolatePlatform : public v8::Platform {
   virtual void UnregisterIsolate(IsolateData* isolate_data) = 0;
 };
 
+/*MODIFIED CODE BEGIN*/
+#if HAVE_INSPECTOR
+NODE_EXTERN void InspectorInit(Environment* env, const char* path, MultiIsolatePlatform* platform);
+NODE_EXTERN void InspectorStart(Environment* env, const char* path, MultiIsolatePlatform* platform, std::string host, int port);
+NODE_EXTERN void InspectorStop(Environment* env);
+#endif
+/*MODIFIED CODE END*/
+
 // If `platform` is passed, it will be used to register new Worker instances.
 // It can be `nullptr`, in which case creating new Workers inside of
 // Environments that use this `IsolateData` will not work.
diff --git a/examples/pxScene2d/external/libnode-v8.15.1/src/node_contextify.cc b/examples/pxScene2d/external/libnode-v8.15.1/src/node_contextify.cc
index 47857e8..52e3a4b 100644
--- a/examples/pxScene2d/external/libnode-v8.15.1/src/node_contextify.cc
+++ b/examples/pxScene2d/external/libnode-v8.15.1/src/node_contextify.cc
@@ -87,6 +87,7 @@ class ContextifyContext {
 
 
   ~ContextifyContext() {
+    context_.ClearWeak();
     context_.Reset();
   }
 
@@ -1085,4 +1086,74 @@ void InitContextify(Local<Object> target,
 }  // anonymous namespace
 }  // namespace node
 
+/*MODIFIED CODE BEGIN*/
+namespace node
+{
+
+void deleteContextifyContext(void *ctx)
+{
+  ContextifyContext* context =  (ContextifyContext*)ctx;
+  if (nullptr != context)
+    delete context;
+}
+
+v8::Handle<Context> makeContext(v8::Isolate *isolate, v8::Handle<Object> sandbox)  // basically MakeContext()  circa line 268
+{
+  if (!isolate)
+  {
+    printf("\nERROR: bad isolate pointer.");
+    return Local<Context>(); // NULL;
+  }
+
+    Environment* env = Environment::GetCurrent(isolate);
+//  HandleScope scope(env->isolate());
+
+  if (!sandbox->IsObject())
+  {
+    env->ThrowTypeError("sandbox argument must be an object.");
+    return Local<Context>(); // NULL;
+  }
+
+  EscapableHandleScope  scope( isolate );
+
+  // Local<Object> sandbox = args[0].As<Object>();
+
+  Local<String> symbol_name =
+      FIXED_ONE_BYTE_STRING(isolate, "_contextifyPrivate");
+
+  // Don't allow contextifying a sandbox multiple times.
+  Local<v8::Private> private_symbol_name = v8::Private::ForApi(isolate, symbol_name);
+  CHECK(
+      !sandbox->HasPrivate(
+          env->context(),
+          private_symbol_name).FromJust());
+
+  TryCatch try_catch(isolate);
+  ContextifyContext* context = new ContextifyContext(env, sandbox);
+
+  if (try_catch.HasCaught())
+  {
+    try_catch.ReThrow();
+    return Local<Context>(); // NULL;
+  }
+
+  if (context->context().IsEmpty())
+  {
+    return Local<Context>(); // NULL;
+  }
+
+  Local<External> hidden_context = External::New(isolate, context);
+  sandbox->SetPrivate(
+      env->context(),
+      private_symbol_name,
+      hidden_context);
+
+  Local<Context>  local_context = context->context(); // returns a local context
+
+  return scope.Escape( local_context );
+}
+
+} // namespace node
+/*MODIFIED CODE END*/
+
 NODE_BUILTIN_MODULE_CONTEXT_AWARE(contextify, node::InitContextify)
diff --git a/examples/pxScene2d/external/libnode-v8.15.1/src/node_contextify_mods.h b/examples/pxScene2d/external/libnode-v8.15.1/src/node_contextify_mods.h
new file mode 100644
index 0000000..1d4ff20
--- /dev/null
+++ b/examples/pxScene2d/external/libnode-v8.15.1/src/node_contextify_mods.h
@@ -0,0 +1,16 @@
+// This is not part of Node... added to expose needed methods.
+
+#include "v8.h"
+
+/*MODIFIED CODE BEGIN*/
+
+namespace node
+{
+  class Environment;
+ 
+  v8::Handle<v8::Context> makeContext(v8::Isolate *isolate, v8::Handle<v8::Object> sandbox);
+  void deleteContextifyContext(void*);
+}
+ 
+/*MODIFIED CODE END*/
+
diff --git a/examples/pxScene2d/external/libnode-v8.15.1/src/node_http_parser.cc b/examples/pxScene2d/external/libnode-v8.15.1/src/node_http_parser.cc
index 504130e..d361f98 100644
--- a/examples/pxScene2d/external/libnode-v8.15.1/src/node_http_parser.cc
+++ b/examples/pxScene2d/external/libnode-v8.15.1/src/node_http_parser.cc
@@ -439,7 +439,14 @@ class Parser : public AsyncWrap {
     Parser* parser;
     ASSIGN_OR_RETURN_UNWRAP(&parser, args.Holder());
 
-    CHECK(parser->current_buffer_.IsEmpty());
+    /* MODIFIED CODE BEGIN */
+    //CHECK(parser->current_buffer_.IsEmpty());
+    if (false == parser->current_buffer_.IsEmpty())
+    {
+      parser->got_exception_ = true;
+      return;
+    }
+    /* MODIFIED CODE END */
     parser->got_exception_ = false;
 
     int rv = http_parser_execute(&(parser->parser_), &settings, nullptr, 0);
diff --git a/examples/pxScene2d/external/libnode-v8.15.1/src/node_internals.h b/examples/pxScene2d/external/libnode-v8.15.1/src/node_internals.h
index a27ac6f..21e1025 100644
--- a/examples/pxScene2d/external/libnode-v8.15.1/src/node_internals.h
+++ b/examples/pxScene2d/external/libnode-v8.15.1/src/node_internals.h
@@ -259,7 +259,9 @@ void AppendExceptionLine(Environment* env,
                          v8::Local<v8::Message> message,
                          enum ErrorHandlingMode mode);
 
-NO_RETURN void FatalError(const char* location, const char* message);
+/* MODIFIED CODE BEGIN */
+/*NO_RETURN*/ void FatalError(const char* location, const char* message);
+/* MODIFIED CODE END */
 
 void ProcessEmitWarning(Environment* env, const char* fmt, ...);
 
diff --git a/examples/pxScene2d/external/libnode-v8.15.1/src/node_platform.cc b/examples/pxScene2d/external/libnode-v8.15.1/src/node_platform.cc
index 0c50e84..f7c21bc 100644
--- a/examples/pxScene2d/external/libnode-v8.15.1/src/node_platform.cc
+++ b/examples/pxScene2d/external/libnode-v8.15.1/src/node_platform.cc
@@ -128,6 +128,13 @@ size_t NodePlatform::NumberOfAvailableBackgroundThreads() {
 void PerIsolatePlatformData::RunForegroundTask(std::unique_ptr<Task> task) {
   Isolate* isolate = Isolate::GetCurrent();
   HandleScope scope(isolate);
+/*MODIFIED CODE BEGIN*/
+  if (isolate->GetCurrentContext().IsEmpty())
+  {
+    task->Run();
+    return;
+  }
+/*MODIFIED CODE END*/
   Environment* env = Environment::GetCurrent(isolate);
   InternalCallbackScope cb_scope(env, Local<Object>(), { 0, 0 },
                                  InternalCallbackScope::kAllowEmptyResource);
diff --git a/examples/pxScene2d/external/libnode-v8.15.1/src/node_watchdog.cc b/examples/pxScene2d/external/libnode-v8.15.1/src/node_watchdog.cc
index af4e9f6..20335ff 100644
--- a/examples/pxScene2d/external/libnode-v8.15.1/src/node_watchdog.cc
+++ b/examples/pxScene2d/external/libnode-v8.15.1/src/node_watchdog.cc
@@ -242,7 +242,10 @@ bool SigintWatchdogHelper::Stop() {
   CHECK_EQ(0, pthread_join(thread_, nullptr));
   has_running_thread_ = false;
 
-  RegisterSignalHandler(SIGINT, SignalExit, true);
+  /* MODIFIED CODE BEGIN */
+  // To make sure SIGINT signal is not caught by libnode
+  // RegisterSignalHandler(SIGINT, SignalExit, true);
+  /* MODIFIED CODE END */
 #else
   watchdog_disabled_ = true;
 #endif
