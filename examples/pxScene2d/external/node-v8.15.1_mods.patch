diff --git a/examples/pxScene2d/external/libnode-v8.15.1/common.gypi b/examples/pxScene2d/external/libnode-v8.15.1/common.gypi
index fd42f27..2571a3f 100644
--- a/examples/pxScene2d/external/libnode-v8.15.1/common.gypi
+++ b/examples/pxScene2d/external/libnode-v8.15.1/common.gypi
@@ -131,7 +131,9 @@
         'variables': {
           'v8_enable_handle_zapping': 0,
         },
-        'cflags': [ '-O3' ],
+        # MODIFIED CODE BEGIN
+        #'cflags': [ '-O3' ],
+        # MODIFIED CODE END
         'conditions': [
           ['target_arch=="x64"', {
             'msvs_configuration_platform': 'x64',
@@ -147,6 +149,37 @@
             'cflags': [ '-fPIE' ],
             'ldflags': [ '-fPIE', '-pie' ]
           }],
+          # MODIFIED CODE BEGIN
+          [ 'no_optimization==1', {
+            'cflags': [ '-O0' ],
+            'msvs_settings': {
+              'VCCLCompilerTool': {
+                'Optimization': 0, # /Od, no optimization
+              }
+            }
+          }],
+          [ 'no_optimization!=1', {
+            'cflags': [ '-Os' ],
+            'msvs_settings': {
+              'VCCLCompilerTool': {
+                'Optimization': 3, # /Ox, full optimization
+                'FavorSizeOrSpeed': 1, # /Ot, favour speed over size
+                'InlineFunctionExpansion': 2, # /Ob2, inline anything eligible
+                'WholeProgramOptimization': 'true', # /GL, whole program optimization, needed for LTCG
+              },
+              'VCLibrarianTool': {
+                'AdditionalOptions': [
+                  '/LTCG', # link time code generation
+                ],
+              },
+              'VCLinkerTool': {
+                'LinkTimeCodeGeneration': 1, # link-time code generation
+                'OptimizeReferences': 2, # /OPT:REF
+                'EnableCOMDATFolding': 2, # /OPT:ICF
+              }
+            }
+          }],
+          # MODIFIED CODE END
           ['node_shared=="true"', {
             'msvs_settings': {
              'VCCLCompilerTool': {
@@ -164,10 +197,12 @@
         ],
         'msvs_settings': {
           'VCCLCompilerTool': {
-            'Optimization': 3, # /Ox, full optimization
-            'FavorSizeOrSpeed': 1, # /Ot, favour speed over size
-            'InlineFunctionExpansion': 2, # /Ob2, inline anything eligible
-            'WholeProgramOptimization': 'true', # /GL, whole program optimization, needed for LTCG
+            # MODIFIED CODE BEGIN
+            #'Optimization': 3, # /Ox, full optimization
+            #'FavorSizeOrSpeed': 1, # /Ot, favour speed over size
+            #'InlineFunctionExpansion': 2, # /Ob2, inline anything eligible
+            #'WholeProgramOptimization': 'true', # /GL, whole program optimization, needed for LTCG
+            # MODIFIED CODE END
             'OmitFramePointers': 'true',
             'EnableFunctionLevelLinking': 'true',
             'EnableIntrinsicFunctions': 'true',
@@ -176,15 +211,19 @@
               '/MP', # compile across multiple CPUs
             ],
           },
-          'VCLibrarianTool': {
-            'AdditionalOptions': [
-              '/LTCG', # link time code generation
-            ],
-          },
+          # MODIFIED CODE BEGIN
+          #'VCLibrarianTool': {
+          #  'AdditionalOptions': [
+          #    '/LTCG', # link time code generation
+          #  ],
+          #},
+          # MODIFIED CODE END
           'VCLinkerTool': {
-            'LinkTimeCodeGeneration': 1, # link-time code generation
-            'OptimizeReferences': 2, # /OPT:REF
-            'EnableCOMDATFolding': 2, # /OPT:ICF
+            # MODIFIED CODE BEGIN
+            #'LinkTimeCodeGeneration': 1, # link-time code generation
+            #'OptimizeReferences': 2, # /OPT:REF
+            #'EnableCOMDATFolding': 2, # /OPT:ICF
+            # MODIFIED CODE END
             'LinkIncremental': 1, # disable incremental linking
           },
         },
@@ -205,7 +244,10 @@
         # Disable "warning C4267: conversion from 'size_t' to 'int',
         # possible loss of data".  Many originate from our dependencies
         # and their sheer number drowns out other, more legitimate warnings.
-        'DisableSpecificWarnings': ['4267'],
+        # MODIFIED CODE BEGIN
+        #'DisableSpecificWarnings': ['4267'],
+        'DisableSpecificWarnings': ['4267', '4251', '4275'],
+        # MODIFIED CODE END
         'WarnAsError': 'false',
       },
       'VCLinkerTool': {
@@ -404,8 +446,13 @@
           ['clang==1', {
             'xcode_settings': {
               'GCC_VERSION': 'com.apple.compilers.llvm.clang.1_0',
-              'CLANG_CXX_LANGUAGE_STANDARD': 'gnu++0x',  # -std=gnu++0x
+              # MODIFIED CODE BEGIN
+              #'CLANG_CXX_LANGUAGE_STANDARD': 'gnu++0x',  # -std=gnu++0x
+              #'CLANG_CXX_LIBRARY': 'libc++',
+              'CLANG_CXX_LANGUAGE_STANDARD': 'c++11',
               'CLANG_CXX_LIBRARY': 'libc++',
+              'MACOSX_DEPLOYMENT_TARGET': '10.9',
+              # MODIFIED CODE END
             },
           }],
         ],
diff --git a/examples/pxScene2d/external/libnode-v8.15.1/configure b/examples/pxScene2d/external/libnode-v8.15.1/configure
index ceb04f7..4a42b1a 100755
--- a/examples/pxScene2d/external/libnode-v8.15.1/configure
+++ b/examples/pxScene2d/external/libnode-v8.15.1/configure
@@ -548,6 +548,13 @@ parser.add_option('--without-bundled-v8',
     help='do not use V8 includes from the bundled deps folder. ' +
          '(This mode is not officially supported for regular applications)')
 
+# MODIFIED CODE BEGIN
+parser.add_option('--no-optimization',
+    action='store_true',
+    dest='no_optimization',
+    help='build without optimization')
+# MODIFIED CODE END
+
 # Create compile_commands.json in out/Debug and out/Release.
 parser.add_option('-C',
     action='store_true',
@@ -1455,6 +1462,9 @@ configure_openssl(output)
 configure_intl(output)
 configure_static(output)
 configure_inspector(output)
+# MODIFIED CODE BEGIN
+output['variables']['no_optimization'] = 1 if options.no_optimization else 0
+# MODIFIED CODE END
 
 # variables should be a root level element,
 # move everything else to target_defaults
diff --git a/examples/pxScene2d/external/libnode-v8.15.1/deps/cares/common.gypi b/examples/pxScene2d/external/libnode-v8.15.1/deps/cares/common.gypi
index 609ad62..d6999a0 100644
--- a/examples/pxScene2d/external/libnode-v8.15.1/deps/cares/common.gypi
+++ b/examples/pxScene2d/external/libnode-v8.15.1/deps/cares/common.gypi
@@ -40,7 +40,9 @@
       'Release': {
         'defines': [ 'NDEBUG' ],
         'cflags': [
-          '-O3',
+          # MODIFIED CODE BEGIN
+          '-Os',
+          # MODIFIED CODE END
           '-fomit-frame-pointer',
           '-fdata-sections',
           '-ffunction-sections'
diff --git a/examples/pxScene2d/external/libnode-v8.15.1/deps/http_parser/http_parser.gyp b/examples/pxScene2d/external/libnode-v8.15.1/deps/http_parser/http_parser.gyp
index 4364f73..39d7466 100644
--- a/examples/pxScene2d/external/libnode-v8.15.1/deps/http_parser/http_parser.gyp
+++ b/examples/pxScene2d/external/libnode-v8.15.1/deps/http_parser/http_parser.gyp
@@ -21,7 +21,9 @@
       },
       'Release': {
         'defines': [ 'NDEBUG' ],
-        'cflags': [ '-Wall', '-Wextra', '-O3' ],
+        # MODIFIED CODE BEGIN
+        'cflags': [ '-Wall', '-Wextra', '-Os' ],
+        # MODIFIED CODE END
         'msvs_settings': {
           'VCCLCompilerTool': {
             'RuntimeLibrary': 0, # static release
diff --git a/examples/pxScene2d/external/libnode-v8.15.1/deps/uv/common.gypi b/examples/pxScene2d/external/libnode-v8.15.1/deps/uv/common.gypi
index 2297bdf..15bdfb3 100644
--- a/examples/pxScene2d/external/libnode-v8.15.1/deps/uv/common.gypi
+++ b/examples/pxScene2d/external/libnode-v8.15.1/deps/uv/common.gypi
@@ -46,7 +46,9 @@
       'Release': {
         'defines': [ 'NDEBUG' ],
         'cflags': [
-          '-O3',
+          # MODIFIED CODE BEGIN
+          '-Os',
+          # MODIFIED CODE END
         ],
         'msvs_settings': {
           'VCCLCompilerTool': {
diff --git a/examples/pxScene2d/external/libnode-v8.15.1/deps/v8/gypfiles/toolchain.gypi b/examples/pxScene2d/external/libnode-v8.15.1/deps/v8/gypfiles/toolchain.gypi
index 80844ce..d755cce 100644
--- a/examples/pxScene2d/external/libnode-v8.15.1/deps/v8/gypfiles/toolchain.gypi
+++ b/examples/pxScene2d/external/libnode-v8.15.1/deps/v8/gypfiles/toolchain.gypi
@@ -1195,7 +1195,9 @@
               # Don't use -O3 with sanitizers.
               ['asan==0 and msan==0 and lsan==0 \
                 and tsan==0 and ubsan==0 and ubsan_vptr==0', {
-                'cflags': ['-O3'],
+                # MODIFIED CODE BEGIN
+                'cflags': ['-Os'],
+                # MODIFIED CODE END
                 'cflags!': ['-O2'],
                 }, {
                 'cflags': ['-O2'],
@@ -1311,7 +1313,9 @@
               # Don't use -O3 with sanitizers.
               ['asan==0 and msan==0 and lsan==0 \
                 and tsan==0 and ubsan==0 and ubsan_vptr==0', {
-                'cflags': ['-O3'],
+                # MODIFIED CODE BEGIN
+                'cflags': ['-Os'],
+                # MODIFIED CODE END
                 'cflags!': ['-O2'],
               }, {
                 'cflags': ['-O2'],
diff --git a/examples/pxScene2d/external/libnode-v8.15.1/deps/v8/src/isolate.cc b/examples/pxScene2d/external/libnode-v8.15.1/deps/v8/src/isolate.cc
index bccd0cb..fdc9877 100644
--- a/examples/pxScene2d/external/libnode-v8.15.1/deps/v8/src/isolate.cc
+++ b/examples/pxScene2d/external/libnode-v8.15.1/deps/v8/src/isolate.cc
@@ -1062,6 +1062,14 @@ Object* Isolate::Throw(Object* exception, MessageLocation* location) {
   HandleScope scope(this);
   Handle<Object> exception_handle(exception, this);
 
+  /* MODIFIED CODE BEGIN */
+  char const* stack_on_exception_enabled = getenv("DUMP_STACK_ON_EXCEPTION");
+  if (stack_on_exception_enabled && (strcmp(stack_on_exception_enabled,"1") == 0))
+  {
+    PrintCurrentStackTrace(stderr);
+  }
+  /* MODIFIED CODE END */
+
   if (FLAG_print_all_exceptions) {
     printf("=========================================================\n");
     printf("Exception thrown:\n");
diff --git a/examples/pxScene2d/external/libnode-v8.15.1/lib/internal/bootstrap_node.js b/examples/pxScene2d/external/libnode-v8.15.1/lib/internal/bootstrap_node.js
index 0e9c36c..66e98d3 100644
--- a/examples/pxScene2d/external/libnode-v8.15.1/lib/internal/bootstrap_node.js
+++ b/examples/pxScene2d/external/libnode-v8.15.1/lib/internal/bootstrap_node.js
@@ -211,7 +211,9 @@
         perf.markMilestone(
           NODE_PERFORMANCE_MILESTONE_PRELOAD_MODULE_LOAD_END);
         // If -i or --interactive were passed, or stdin is a TTY.
-        if (process._forceRepl || NativeModule.require('tty').isatty(0)) {
+/* MODIFIED CODE BEGIN */
+//      if (process._forceRepl || NativeModule.require('tty').isatty(0)) {
+/* MODIFIED CODE END */
           // REPL
           const cliRepl = NativeModule.require('internal/repl');
           cliRepl.createInternalRepl(process.env, function(err, repl) {
@@ -233,6 +235,8 @@
             // User passed '-e' or '--eval'
             evalScript('[eval]');
           }
+/* MODIFIED CODE BEGIN */
+/*
         } else {
           // Read all of stdin - execute it.
           process.stdin.setEncoding('utf8');
@@ -250,7 +254,8 @@
               evalScript('[stdin]');
             }
           });
-        }
+        } */
+/* MODIFIED CODE END */
       }
     }
     perf.markMilestone(NODE_PERFORMANCE_MILESTONE_BOOTSTRAP_COMPLETE);
diff --git a/examples/pxScene2d/external/libnode-v8.15.1/lib/net.js b/examples/pxScene2d/external/libnode-v8.15.1/lib/net.js
index 98bcbc3..70b6414 100644
--- a/examples/pxScene2d/external/libnode-v8.15.1/lib/net.js
+++ b/examples/pxScene2d/external/libnode-v8.15.1/lib/net.js
@@ -34,6 +34,9 @@ const {
 const assert = require('assert');
 const cares = process.binding('cares_wrap');
 const uv = process.binding('uv');
+/*MODIFIED CODE BEGIN*/
+const fileSystem = require('fs');
+/*MODIFIED CODE END*/
 
 const { Buffer } = require('buffer');
 const TTYWrap = process.binding('tty_wrap');
@@ -1083,6 +1086,27 @@ function lookupAndConnect(self, options) {
     dnsopts.hints = dns.ADDRCONFIG;
   }
 
+/*MODIFIED CODE BEGIN*/
+  var ipMode = 0;
+  try {
+    fileSystem.accessSync('/tmp/ipmode_v4');
+    ipMode = 4;
+  } catch(e) {
+    debug('/tmp/ipmode_v4 does not exist');
+  }
+
+  try {
+    fileSystem.accessSync('/tmp/ipmode_v6');
+    ipMode = 6;
+  } catch(e) {
+    debug('/tmp/ipmode_v6 does not exist');
+  }
+
+  if (ipMode == 4 || ipMode == 6) {
+    dnsopts.family = ipMode;
+  }
+/*MODIFIED CODE END*/
+
   debug('connect: find host', host);
   debug('connect: dns options', dnsopts);
   self._host = host;
diff --git a/examples/pxScene2d/external/libnode-v8.15.1/src/node.cc b/examples/pxScene2d/external/libnode-v8.15.1/src/node.cc
index 3d791f0..d572a6d 100644
--- a/examples/pxScene2d/external/libnode-v8.15.1/src/node.cc
+++ b/examples/pxScene2d/external/libnode-v8.15.1/src/node.cc
@@ -178,10 +178,16 @@ static bool track_heap_objects = false;
 static const char* eval_string = nullptr;
 static std::vector<std::string> preload_modules;
 static const int v8_default_thread_pool_size = 4;
-static int v8_thread_pool_size = v8_default_thread_pool_size;
+/*MODIFIED CODE BEGIN*/
+//static int v8_thread_pool_size = v8_default_thread_pool_size;
+int v8_thread_pool_size = v8_default_thread_pool_size;
+/*MODIFIED CODE END*/
 static bool prof_process = false;
 static bool v8_is_profiling = false;
-static bool node_is_initialized = false;
+/*MODIFIED CODE BEGIN*/
+//static bool node_is_initialized = false;
+bool node_is_initialized = false;
+/*MODIFIED CODE END*/
 static node_module* modpending;
 static node_module* modlist_builtin;
 static node_module* modlist_internal;
@@ -266,7 +272,11 @@ bool linux_at_secure = false;
 double prog_start_time;
 
 static Mutex node_isolate_mutex;
-static v8::Isolate* node_isolate;
+/*MODIFIED CODE BEGIN*/
+//static v8::Isolate* node_isolate;
+v8::Isolate* node_isolate;
+FILE* errorFile = NULL;
+/*MODIFIED CODE END*/
 
 DebugOptions debug_options;
 
@@ -366,6 +376,28 @@ static struct {
 static const unsigned kMaxSignal = 32;
 #endif
 
+/* MODIFIED CODE BEGIN */
+void PrintErrorStringToFile(const char* format, ...) {
+  va_list filelog;
+  va_start(filelog, format);
+  const char* val = getenv("NODE_ERROR_FILE");
+  if (val) {
+    errorFile = fopen(val,"w");
+  }
+  else
+  {
+    errorFile = fopen("/tmp/nodeerror.log","w");
+  }
+  if (NULL != errorFile)
+  {
+    vfprintf(errorFile, format, filelog);
+    fclose(errorFile);
+    errorFile = NULL;
+  }
+  va_end(filelog);
+}
+/* MODIFIED CODE END */
+
 void PrintErrorString(const char* format, ...) {
   va_list ap;
   va_start(ap, format);
@@ -1157,6 +1189,11 @@ bool DomainsStackHasErrorHandler(const Environment* env) {
 }
 
 
+/*MODIFIED CODE BEGIN*/
+} //anonymous namespace
+/*MODIFIED CODE END*/
+
+
 bool ShouldAbortOnUncaughtException(Isolate* isolate) {
   HandleScope scope(isolate);
 
@@ -1171,6 +1208,11 @@ bool ShouldAbortOnUncaughtException(Isolate* isolate) {
 }
 
 
+/*MODIFIED CODE BEGIN*/
+namespace {
+/*MODIFIED CODE END*/
+
+
 Local<Value> GetDomainProperty(Environment* env, Local<Object> object) {
   Local<Value> domain_v =
       object->GetPrivate(env->context(), env->domain_private_symbol())
@@ -1673,6 +1715,9 @@ void AppendExceptionLine(Environment* env,
 
     uv_tty_reset_mode();
     PrintErrorString("\n%s", arrow);
+    /* MODIFIED CODE BEGIN */
+    PrintErrorStringToFile("\n%s", arrow);
+    /* MODIFIED CODE END */
     return;
   }
 
@@ -1712,9 +1757,15 @@ static void ReportException(Environment* env,
   if (trace.length() > 0 && !trace_value->IsUndefined()) {
     if (arrow.IsEmpty() || !arrow->IsString() || decorated) {
       PrintErrorString("%s\n", *trace);
+      /* MODIFIED CODE BEGIN */
+      PrintErrorStringToFile("%s\n", *trace);
+      /* MODIFIED CODE END */
     } else {
       node::Utf8Value arrow_string(env->isolate(), arrow);
       PrintErrorString("%s\n%s\n", *arrow_string, *trace);
+      /* MODIFIED CODE BEGIN */
+      PrintErrorStringToFile("%s\n%s\n", *arrow_string, *trace);
+      /* MODIFIED CODE END */
     }
   } else {
     // this really only happens for RangeErrors, since they're the only
@@ -1738,18 +1789,31 @@ static void ReportException(Environment* env,
 
       PrintErrorString("%s\n", *message ? *message :
                                           "<toString() threw exception>");
+      /* MODIFIED CODE BEGIN */
+      PrintErrorStringToFile("%s\n", *message ? *message :
+                                          "<toString() threw exception>");
+      /* MODIFIED CODE END */
     } else {
       node::Utf8Value name_string(env->isolate(), name);
       node::Utf8Value message_string(env->isolate(), message);
 
       if (arrow.IsEmpty() || !arrow->IsString() || decorated) {
         PrintErrorString("%s: %s\n", *name_string, *message_string);
+        /* MODIFIED CODE BEGIN */
+        PrintErrorStringToFile("%s: %s\n", *name_string, *message_string);
+        /* MODIFIED CODE END */
       } else {
         node::Utf8Value arrow_string(env->isolate(), arrow);
         PrintErrorString("%s\n%s: %s\n",
                          *arrow_string,
                          *name_string,
                          *message_string);
+        /* MODIFIED CODE BEGIN */
+        PrintErrorStringToFile("%s\n%s: %s\n",
+                         *arrow_string,
+                         *name_string,
+                         *message_string);
+        /* MODIFIED CODE END */
       }
     }
   }
@@ -2047,14 +2111,19 @@ static void OnFatalError(const char* location, const char* message) {
     PrintErrorString("FATAL ERROR: %s\n", message);
   }
   fflush(stderr);
-  ABORT();
+  /* MODIFIED CODE BEGIN */
+  //ABORT();
+  /* MODIFIED CODE END */
 }
 
 
-NO_RETURN void FatalError(const char* location, const char* message) {
+/* MODIFIED CODE BEGIN */
+/*NO_RETURN*/ void FatalError(const char* location, const char* message) {
   OnFatalError(location, message);
   // to suppress compiler warning
-  ABORT();
+  /* MODIFIED CODE BEGIN */
+  //ABORT();
+  /* MODIFIED CODE END */
 }
 
 
@@ -2103,7 +2172,9 @@ void FatalException(Isolate* isolate,
 #if HAVE_INSPECTOR
     env->inspector_agent()->FatalException(error, message);
 #endif
-    exit(exit_code);
+    /* MODIFIED CODE BEGIN */
+    //exit(exit_code);
+    /* MODIFIED CODE END */
   }
 }
 
@@ -4276,6 +4347,14 @@ void RegisterBuiltinModules() {
 #undef V
 }
 
+/*MODIFIED CODE BEGIN*/
+#if HAVE_INSPECTOR
+void InspectorStart(Environment* env, const char* path, MultiIsolatePlatform* platform) {
+  env->inspector_agent()->Start(static_cast<node::NodePlatform*>(platform), path, debug_options);
+}
+#endif
+/*MODIFIED CODE END*/
+
 }  // namespace node
 
 #if !HAVE_INSPECTOR
diff --git a/examples/pxScene2d/external/libnode-v8.15.1/src/node.h b/examples/pxScene2d/external/libnode-v8.15.1/src/node.h
index 266744e..968568e 100644
--- a/examples/pxScene2d/external/libnode-v8.15.1/src/node.h
+++ b/examples/pxScene2d/external/libnode-v8.15.1/src/node.h
@@ -197,6 +197,13 @@ typedef intptr_t ssize_t;
 namespace node {
 
 NODE_EXTERN extern bool no_deprecation;
+
+/*MODIFIED CODE BEGIN*/
+NODE_EXTERN extern int v8_thread_pool_size;
+NODE_EXTERN extern v8::Isolate* node_isolate;
+NODE_EXTERN extern bool node_is_initialized;
+/*MODIFIED CODE END*/
+
 #if HAVE_OPENSSL
 NODE_EXTERN extern bool ssl_openssl_cert_store;
 # if NODE_FIPS_MODE
@@ -214,6 +221,10 @@ NODE_EXTERN void Init(int* argc,
 class IsolateData;
 class Environment;
 
+/*MODIFIED CODE BEGIN*/
+NODE_EXTERN bool ShouldAbortOnUncaughtException(v8::Isolate* isolate);
+/*MODIFIED CODE END*/
+
 class MultiIsolatePlatform : public v8::Platform {
  public:
   virtual ~MultiIsolatePlatform() { }
@@ -226,6 +237,12 @@ class MultiIsolatePlatform : public v8::Platform {
   virtual void UnregisterIsolate(IsolateData* isolate_data) = 0;
 };
 
+/*MODIFIED CODE BEGIN*/
+#if HAVE_INSPECTOR
+NODE_EXTERN void InspectorStart(Environment* env, const char* path, MultiIsolatePlatform* platform);
+#endif
+/*MODIFIED CODE END*/
+
 // If `platform` is passed, it will be used to register new Worker instances.
 // It can be `nullptr`, in which case creating new Workers inside of
 // Environments that use this `IsolateData` will not work.
diff --git a/examples/pxScene2d/external/libnode-v8.15.1/src/node_contextify.cc b/examples/pxScene2d/external/libnode-v8.15.1/src/node_contextify.cc
index 47857e8..52e3a4b 100644
--- a/examples/pxScene2d/external/libnode-v8.15.1/src/node_contextify.cc
+++ b/examples/pxScene2d/external/libnode-v8.15.1/src/node_contextify.cc
@@ -87,6 +87,7 @@ class ContextifyContext {
 
 
   ~ContextifyContext() {
+    context_.ClearWeak();
     context_.Reset();
   }
 
@@ -1085,4 +1086,74 @@ void InitContextify(Local<Object> target,
 }  // anonymous namespace
 }  // namespace node
 
+/*MODIFIED CODE BEGIN*/
+namespace node
+{
+
+void deleteContextifyContext(void *ctx)
+{
+  ContextifyContext* context =  (ContextifyContext*)ctx;
+  if (nullptr != context)
+    delete context;
+}
+
+v8::Handle<Context> makeContext(v8::Isolate *isolate, v8::Handle<Object> sandbox)  // basically MakeContext()  circa line 268
+{
+  if (!isolate)
+  {
+    printf("\nERROR: bad isolate pointer.");
+    return Local<Context>(); // NULL;
+  }
+
+    Environment* env = Environment::GetCurrent(isolate);
+//  HandleScope scope(env->isolate());
+
+  if (!sandbox->IsObject())
+  {
+    env->ThrowTypeError("sandbox argument must be an object.");
+    return Local<Context>(); // NULL;
+  }
+
+  EscapableHandleScope  scope( isolate );
+
+  // Local<Object> sandbox = args[0].As<Object>();
+
+  Local<String> symbol_name =
+      FIXED_ONE_BYTE_STRING(isolate, "_contextifyPrivate");
+
+  // Don't allow contextifying a sandbox multiple times.
+  Local<v8::Private> private_symbol_name = v8::Private::ForApi(isolate, symbol_name);
+  CHECK(
+      !sandbox->HasPrivate(
+          env->context(),
+          private_symbol_name).FromJust());
+
+  TryCatch try_catch(isolate);
+  ContextifyContext* context = new ContextifyContext(env, sandbox);
+
+  if (try_catch.HasCaught())
+  {
+    try_catch.ReThrow();
+    return Local<Context>(); // NULL;
+  }
+
+  if (context->context().IsEmpty())
+  {
+    return Local<Context>(); // NULL;
+  }
+
+  Local<External> hidden_context = External::New(isolate, context);
+  sandbox->SetPrivate(
+      env->context(),
+      private_symbol_name,
+      hidden_context);
+
+  Local<Context>  local_context = context->context(); // returns a local context
+
+  return scope.Escape( local_context );
+}
+
+} // namespace node
+/*MODIFIED CODE END*/
+
 NODE_BUILTIN_MODULE_CONTEXT_AWARE(contextify, node::InitContextify)
diff --git a/examples/pxScene2d/external/libnode-v8.15.1/src/node_contextify_mods.h b/examples/pxScene2d/external/libnode-v8.15.1/src/node_contextify_mods.h
new file mode 100644
index 0000000..1d4ff20
--- /dev/null
+++ b/examples/pxScene2d/external/libnode-v8.15.1/src/node_contextify_mods.h
@@ -0,0 +1,16 @@
+// This is not part of Node... added to expose needed methods.
+
+#include "v8.h"
+
+/*MODIFIED CODE BEGIN*/
+
+namespace node
+{
+  class Environment;
+ 
+  v8::Handle<v8::Context> makeContext(v8::Isolate *isolate, v8::Handle<v8::Object> sandbox);
+  void deleteContextifyContext(void*);
+}
+ 
+/*MODIFIED CODE END*/
+
diff --git a/examples/pxScene2d/external/libnode-v8.15.1/src/node_http_parser.cc b/examples/pxScene2d/external/libnode-v8.15.1/src/node_http_parser.cc
index 504130e..d361f98 100644
--- a/examples/pxScene2d/external/libnode-v8.15.1/src/node_http_parser.cc
+++ b/examples/pxScene2d/external/libnode-v8.15.1/src/node_http_parser.cc
@@ -439,7 +439,14 @@ class Parser : public AsyncWrap {
     Parser* parser;
     ASSIGN_OR_RETURN_UNWRAP(&parser, args.Holder());
 
-    CHECK(parser->current_buffer_.IsEmpty());
+    /* MODIFIED CODE BEGIN */
+    //CHECK(parser->current_buffer_.IsEmpty());
+    if (false == parser->current_buffer_.IsEmpty())
+    {
+      parser->got_exception_ = true;
+      return;
+    }
+    /* MODIFIED CODE END */
     parser->got_exception_ = false;
 
     int rv = http_parser_execute(&(parser->parser_), &settings, nullptr, 0);
diff --git a/examples/pxScene2d/external/libnode-v8.15.1/src/node_internals.h b/examples/pxScene2d/external/libnode-v8.15.1/src/node_internals.h
index a27ac6f..21e1025 100644
--- a/examples/pxScene2d/external/libnode-v8.15.1/src/node_internals.h
+++ b/examples/pxScene2d/external/libnode-v8.15.1/src/node_internals.h
@@ -259,7 +259,9 @@ void AppendExceptionLine(Environment* env,
                          v8::Local<v8::Message> message,
                          enum ErrorHandlingMode mode);
 
-NO_RETURN void FatalError(const char* location, const char* message);
+/* MODIFIED CODE BEGIN */
+/*NO_RETURN*/ void FatalError(const char* location, const char* message);
+/* MODIFIED CODE END */
 
 void ProcessEmitWarning(Environment* env, const char* fmt, ...);
 
diff --git a/examples/pxScene2d/external/libnode-v8.15.1/src/node_platform.cc b/examples/pxScene2d/external/libnode-v8.15.1/src/node_platform.cc
index 0c50e84..f7c21bc 100644
--- a/examples/pxScene2d/external/libnode-v8.15.1/src/node_platform.cc
+++ b/examples/pxScene2d/external/libnode-v8.15.1/src/node_platform.cc
@@ -128,6 +128,13 @@ size_t NodePlatform::NumberOfAvailableBackgroundThreads() {
 void PerIsolatePlatformData::RunForegroundTask(std::unique_ptr<Task> task) {
   Isolate* isolate = Isolate::GetCurrent();
   HandleScope scope(isolate);
+/*MODIFIED CODE BEGIN*/
+  if (isolate->GetCurrentContext().IsEmpty())
+  {
+    task->Run();
+    return;
+  }
+/*MODIFIED CODE END*/
   Environment* env = Environment::GetCurrent(isolate);
   InternalCallbackScope cb_scope(env, Local<Object>(), { 0, 0 },
                                  InternalCallbackScope::kAllowEmptyResource);
diff --git a/examples/pxScene2d/external/libnode-v8.15.1/src/node_watchdog.cc b/examples/pxScene2d/external/libnode-v8.15.1/src/node_watchdog.cc
index af4e9f6..20335ff 100644
--- a/examples/pxScene2d/external/libnode-v8.15.1/src/node_watchdog.cc
+++ b/examples/pxScene2d/external/libnode-v8.15.1/src/node_watchdog.cc
@@ -242,7 +242,10 @@ bool SigintWatchdogHelper::Stop() {
   CHECK_EQ(0, pthread_join(thread_, nullptr));
   has_running_thread_ = false;
 
-  RegisterSignalHandler(SIGINT, SignalExit, true);
+  /* MODIFIED CODE BEGIN */
+  // To make sure SIGINT signal is not caught by libnode
+  // RegisterSignalHandler(SIGINT, SignalExit, true);
+  /* MODIFIED CODE END */
 #else
   watchdog_disabled_ = true;
 #endif
diff --git a/examples/pxScene2d/external/libnode-v8.15.1/vcbuild.bat b/examples/pxScene2d/external/libnode-v8.15.1/vcbuild.bat
index d3014a0..fd75030 100644
--- a/examples/pxScene2d/external/libnode-v8.15.1/vcbuild.bat
+++ b/examples/pxScene2d/external/libnode-v8.15.1/vcbuild.bat
@@ -51,6 +51,9 @@ set "common_test_suites=%js_test_suites% doctool addons addons-napi&set build_ad
 set http2_debug=
 set nghttp2_debug=
 set link_module=
+@rem MODIFIED CODE BEGIN
+set no_optimization=
+@rem MODIFIED CODE END
 
 :next-arg
 if "%1"=="" goto args-done
@@ -116,6 +119,9 @@ if /i "%1"=="no-NODE-OPTIONS"	set no_NODE_OPTIONS=1&goto arg-ok
 if /i "%1"=="debug-http2"   set debug_http2=1&goto arg-ok
 if /i "%1"=="debug-nghttp2" set debug_nghttp2=1&goto arg-ok
 if /i "%1"=="link-module"   set "link_module= --link-module=%2%link_module%"&goto arg-ok-2
+@rem MODIFIED CODE BEGIN
+if /i "%1"=="no-optimization" set no_optimization=1&goto arg-ok
+@rem MODIFIED CODE END
 
 echo Error: invalid command line option `%1`.
 exit /b 1
@@ -161,6 +167,9 @@ if defined link_module      set configure_flags=%configure_flags% %link_module%
 if defined i18n_arg         set configure_flags=%configure_flags% --with-intl=%i18n_arg%
 if defined config_flags     set configure_flags=%configure_flags% %config_flags%
 if defined target_arch      set configure_flags=%configure_flags% --dest-cpu=%target_arch%
+@rem MODIFIED CODE BEGIN
+if defined no_optimization  set configure_flags=%configure_flags% --no-optimization
+@rem MODIFIED CODE END
 
 if not exist "%~dp0deps\icu" goto no-depsicu
 if "%target%"=="Clean" echo deleting %~dp0deps\icu
